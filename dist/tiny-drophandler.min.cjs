"use strict";let standardAPIAvailable="getAsEntry"in DataTransferItem.prototype;async function handleEntry(e,t){let r=e.fullPath.slice(1);if(e.isFile){let a=await new Promise(t=>{e.file(t)});t[r]=a}else if(e.isDirectory){let a;delete t[r];let n=e.createReader();do for(let e of a=await new Promise((e,t)=>{n.readEntries(t=>e(t),t)}))await handleEntry(e,t);while(a.length>0)}}let attachDropHandler=({target:e=document.documentElement,onDrop:t,onDragOver:r,onDragLeave:a})=>{let n=e=>{e.preventDefault(),r&&r(e)},l=e=>{a&&a(e)},i=async e=>{if(e.preventDefault(),a&&a(e),!e.dataTransfer)return;let r=e.dataTransfer.items,n=Object.fromEntries(Array.from(e.dataTransfer.files).map(e=>[e.name,e]));try{for(let e=0;e<r.length;e++){let t=r[e];if("file"===t.kind){let e=t[standardAPIAvailable?"getAsEntry":"webkitGetAsEntry"]();e&&!e.isFile&&await handleEntry(e,n)}}}catch(e){console.warn(e)}let l=Object.entries(n).map(([e,t])=>({file:t,fullPath:e}));0!==l.length&&t(l)};return e.addEventListener("dragover",n),e.addEventListener("dragleave",l),e.addEventListener("drop",i),()=>{e.removeEventListener("dragover",n),e.removeEventListener("dragleave",l),e.removeEventListener("drop",i)}};exports.attachDropHandler=attachDropHandler;
//# sourceMappingURL=tiny-drophandler.min.cjs.map
