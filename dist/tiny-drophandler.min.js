let e="getAsEntry"in DataTransferItem.prototype;async function t(e,r){let a=e.fullPath.slice(1);if(e.isFile){let t=await new Promise(t=>{e.file(t)});r[a]=t}else if(e.isDirectory){let n;delete r[a];let i=e.createReader();do for(let e of n=await new Promise((e,t)=>{i.readEntries(t=>e(t),t)}))await t(e,r);while(n.length>0)}}let r=({target:r=document.documentElement,onDrop:a,onDragOver:n,onDragLeave:i})=>{let l=e=>{e.preventDefault(),n&&n(e)},s=e=>{i&&i(e)},o=async r=>{if(r.preventDefault(),i&&i(r),!r.dataTransfer)return;let n=r.dataTransfer.items,l=Object.fromEntries(Array.from(r.dataTransfer.files).map(e=>[e.name,e]));try{for(let r=0;r<n.length;r++){let a=n[r];if("file"===a.kind){let r=a[e?"getAsEntry":"webkitGetAsEntry"]();r&&!r.isFile&&await t(r,l)}}}catch(e){console.warn(e)}let s=Object.entries(l).map(([e,t])=>({file:t,fullPath:e}));0!==s.length&&a(s)};return r.addEventListener("dragover",l),r.addEventListener("dragleave",s),r.addEventListener("drop",o),()=>{r.removeEventListener("dragover",l),r.removeEventListener("dragleave",s),r.removeEventListener("drop",o)}};export{r as attachDropHandler};
//# sourceMappingURL=tiny-drophandler.min.js.map
