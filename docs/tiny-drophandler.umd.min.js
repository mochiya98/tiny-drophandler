!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).TinyDrophandler={})}(this,function(e){"use strict";let t="getAsEntry"in DataTransferItem.prototype;async function r(e,t){if(e.isFile){let r=await new Promise(t=>{e.file(t)});t.push({file:r,fullPath:e.fullPath.slice(1)})}else if(e.isDirectory){let n;let a=e.createReader();do for(let e of n=await new Promise((e,t)=>{a.readEntries(t=>e(t),t)}))await r(e,t);while(n.length>0)}}e.attachDropHandler=({target:e=document.documentElement,onDrop:n,onDragOver:a,onDragLeave:i})=>{let l=e=>{e.preventDefault(),a&&a(e)},o=e=>{i&&i(e)},s=async e=>{if(e.preventDefault(),i&&i(e),!e.dataTransfer)return;let a=e.dataTransfer.items,l=Array.from(e.dataTransfer.files).map(e=>({file:e,fullPath:e.name}));try{for(let e=0;e<a.length;e++){let n=a[e];if("file"===n.kind){let e=n[t?"getAsEntry":"webkitGetAsEntry"]();e&&!e.isFile&&await r(e,l)}}}catch(e){console.warn(e)}0!==l.length&&n(l)};return e.addEventListener("dragover",l),e.addEventListener("dragleave",o),e.addEventListener("drop",s),()=>{e.removeEventListener("dragover",l),e.removeEventListener("dragleave",o),e.removeEventListener("drop",s)}}});
//# sourceMappingURL=tiny-drophandler.umd.min.js.map
